---
openapi: 3.0.3
info:
  title: Students API
  description: Students API for OAS 3 demo
  contact:
    name: saini, k
    email: sainik73@gmail.com
  version: 1.0.0
servers:
  - url: https://virtserver.swaggerhub.com/sainik73/students/1.0.0
    description: SwaggerHub API Auto Mocking
paths:
  /students:
    post:
      description: Create a new student
      operationId: "createStudent"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        "201":
          description: Successfully created a new student
        "400":
          description: Bad request
        "500":
          description: unexpected error encountered in system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
    put:
      description: upate a student record
      operationId: "updateStudent"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        "200":
          description: Successfully created a new student
        "400":
          description: Bad request
        "500":
          description: unexpected error encountered in system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
    get:
      description: Get all students
      operationId: "findAllStudents"
      responses:
        "200":
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Students'
        "404":
          description: Student not found in system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
  /students/{student-id}:
    description: Student resource by Id
    get:
      description: fetch student by Id
      operationId: "findStudentById"
      parameters:
        - name: student-id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            example: 103
      responses:
        "200":
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        "404":
          description: Student not found in system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
  /students/age:
    get:
      description: fetch student by age
      operationId: "findStudentsByAge"
      parameters:
        - name: student-age
          in: query
          required: true
          style: form
          explode: true
          schema:
            type: integer
            example: 22
      responses:
        "200":
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Students'
        "404":
          description: Student not found in system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
  /students/name:
    get:
      description: fetch student by age
      operationId: "findStudentsByName"
      parameters:
        - name: student-name
          in: query
          required: true
          style: form
          explode: true
          schema:
            type: string
            example: Alex
      responses:
        "200":
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Students'
        "404":
          description: Student not found in system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
components:
  schemas:
    Student:
      required:
        - age
        - name
        - studentid
      type: object
      properties:
        studentid:
          type: integer
          format: int32
          example: 103
          description: |
            Identifier of the student
        name:
          type: string
          minLength: 1
          maxLength: 80
          example: Alex
          description: |
            Name of the student
        age:
          type: integer
          format: int32
          minimum: 2
          maximum: 40
          example: 22
          description: |
            Age of the student

    Students:
      type: array
      items:
        $ref: '#/components/schemas/Student'
    CustomError:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: "2019-02-27 12:40:45"
        status:
          type: integer
          example: 1003
        error:
          type: string
          example: Student id is not valid